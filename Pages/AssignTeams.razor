@inject MeetupService MeetupService
@inject NavigationManager NavigationManager

<CascadingValue Value="this">
    <TabControl>
        <TabPage Text="Create Teams">
            <EditForm Model="team" OnValidSubmit="@OnSubmit">
                <InputText @bind-Value="@team.Name" placeholder="Name of Team" />

                <button>Create Team</button>
            </EditForm>
            @foreach (Team t in Teams)
            {
                <div class="avatar" style='background-image: url(@t.AvatarSettings.AvatarUrl); background-size:
                @(t.AvatarSettings.Size
                + "%"); background-position:
                @(@t.AvatarSettings.Left + "%") @(@t.AvatarSettings.Top + "%");'>
                </div>
                <div @onclick="()=>GoToTeamAvatar(t.Id)">@t.Name</div>
            }
        </TabPage>

        <TabPage Text="Assign Users">
            <AssignTo />
        </TabPage>
    </TabControl>
</CascadingValue>



@code {
    [Parameter]
    public string EventId { get; set; }
    public List<Team> Teams { get; set; }
    public Team team;
    public Event e { get; set; }


    public void GoToTeamAvatar(String teamId)
    {
        NavigationManager.NavigateTo("/AddAvatar/" + teamId);
    }

    protected override void OnInitialized()
    {
        Teams = MeetupService.GetTeamsByEventId(EventId);
        team = new Team();
        e = MeetupService.GetEventById(EventId);
    }

    public void OnSubmit()
    {

        team.EventId = EventId;
        string AvatarId = MeetupService.AddAvatarSettings(new AvatarSettings
        {
            AvatarUrl = "/avatars/blank-profile.webp",
            Left = 0,
            Top = 0,
            Size = 100
        });

        team.AvatarSettingsId = AvatarId;
        MeetupService.CreateTeam(team);

        Teams = MeetupService.GetTeamsByEventId(EventId);
        team = new Team();
        StateHasChanged();
    }

}
