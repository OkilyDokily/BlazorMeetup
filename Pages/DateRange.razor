@using System.Globalization
@inject MeetupService MeetupService

<EditForm Model="@rd" OnValidSubmit="@OnSubmit">
    <div class="form-item">
        <label>Add Restricted Date</label>
        <InputDate type="Date" @bind-Value="rd.Date" />
    </div>
    <button>Add Date</button>
</EditForm>

@foreach (RestrictDate rd in ParentEvent.RestrictDates)
{
    <div class="flex">@rd.Date.ToString("M/dd/yyyy", CultureInfo.InvariantCulture) <div class="text-xs"
        @onclick="()=>AddTimesToDate(rd.Id)">Add Times to this date/See added
            times</div>
        <div class="text-xs" @onclick="()=>DeleteThisRestrictDate(rd.Id)">Delete this date</div>
    </div>
}

@code {
    [Parameter]
    public Event ParentEvent { get; set; }
    RestrictDate rd { get; set; }
    [CascadingParameter(Name = "CreateEventAcc")]
    public CreateEvent CreateEventAcc { get; set; }

    [Parameter]
    public TabControl TabControlAcc { get; set; }

    protected override void OnInitialized()
    {
        rd = new RestrictDate();
        rd.Date = DateTime.Today;
        rd.EventId = ParentEvent.Id;
    }

    public void DeleteThisRestrictDate(string id)
    {
        MeetupService.DeleteRestrictDate(id);
        CreateEventAcc.UpdateCreated();
        StateHasChanged();
    }

    public void AddTimesToDate(string id)
    {
        CreateEventAcc.RestrictDateId = id;
        TabControlAcc.ActivatePageByText("Time Range");
        TabControlAcc.EnableClickByString("Date Range >>");
        StateHasChanged();

    }

    public void OnSubmit()
    {
        MeetupService.AddRestrictDate(rd);
        rd = new RestrictDate();
        rd.Date = DateTime.Today;
        rd.EventId = ParentEvent.Id;
        CreateEventAcc.UpdateCreated();
        StateHasChanged();
    }

}
