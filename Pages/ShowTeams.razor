@inject MeetupService MeetupService
@inject TeamsUpdateService TeamsUpdateService
@implements IDisposable

    <style>
        .userdivs {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            border: 1px black solid;
            background-repeat: no-repeat;
            background-color: #1fe0;
        }
    </style>


<h3>ShowTeams</h3>
<div  style="width: 18rem; min-height: 140px;">

    <div >
        Users
    </div>
    <ul >
        @foreach (Attendee a in AttendeesWithoutTeams)
        {
            if (a.AvatarSettings != null)
            {
                <li >
                    <div  style="background-image: url(@a.AvatarSettings.AvatarUrl); background-size: @(a.AvatarSettings.Size + "%"); background-position: @(a.AvatarSettings.Left + "%") @(a.AvatarSettings.Top + "%");">
                    </div>
                    <div>@a.UserName</div>
                </li>
            }

        }
    </ul>
</div>

@foreach (Team t in Teams)
{
    <div  style=" width: 18rem; min-height: 140px; ">
        <div >
            @t.Name
        </div>
        <ul >
            @foreach (TeamAttendee ta in t.Attendees)
            {
                if (ta.Attendee.AvatarSettings != null)
                {
                    <li >
                        <div  style="background-image: url(@ta.Attendee.AvatarSettings.AvatarUrl); background-size: @(ta.Attendee.AvatarSettings.Size + "%"); background-position: @(ta.Attendee.AvatarSettings.Left + "%") @(ta.Attendee.AvatarSettings.Top + "%");">
                        </div>
                        <div> @ta.Attendee.UserName</div>
                    </li>
                }

            }
        </ul>
    </div>
}

@code {
    [CascadingParameter]
    EventPage eventPage { get; set; }
    List<Team> Teams { get; set; }
    List<Attendee> AttendeesWithoutTeams { get; set; }

    Func<Task> myDelegate { get; set; }


    protected override void OnInitialized()
    {
        myDelegate = async () => await InvokeAsync(() => { this.UpdateTeamsWithMeetupService(); this.UpDateAttendeesWithoutTeams(); this.StateHasChanged(); Debug.WriteLine("Invookkked"); });
        TeamsUpdateService.AddEvent(eventPage.pageEvent.Id, myDelegate);

        UpdateTeamsWithMeetupService();
        UpDateAttendeesWithoutTeams();
        base.OnInitialized();
    }

    void UpDateAttendeesWithoutTeams()
    {
        AttendeesWithoutTeams = MeetupService.GetAttendeesWithoutTeams(eventPage.pageEvent.Id);
    }

    void UpdateTeamsWithMeetupService()
    {
        Teams = MeetupService.GetTeamsByEventId(eventPage.pageEvent.Id);
    }

    public void Dispose()
    {
        TeamsUpdateService.RemoveDelegate(eventPage.pageEvent.Id,myDelegate);
    }
}
