@inject MeetupService MeetupService
@inject TeamsUpdateService TeamsUpdateService
@implements IDisposable



<h3>ShowTeams</h3>
<div class="teams-collection">
    <div class="team">

        <div>
            Users
        </div>
        <ul>

            @foreach (Attendee a in AttendeesWithoutTeams)
            {
                if (a.AvatarSettings != null)
                {
                    <li class="flex">
                        <div class="avatar"
                    style="background-image: url(@a.AvatarSettings.AvatarUrl); background-size: @(a.AvatarSettings.Size + "%"); background-position: @(a.AvatarSettings.Left + "%") @(a.AvatarSettings.Top + "%");">
                        </div>
                        <div>@a.UserName</div>
                    </li>
                }

            }

        </ul>
    </div>

    @foreach (Team t in Teams)
    {
        <div class="team">
            <div>
                @t.Name
            </div>
            <ul>
                @foreach (TeamAttendee ta in t.Attendees)
                {
                    if (ta.Attendee.AvatarSettings != null)
                    {
                        <li class="flex">
                            <div class="avatar"
                    style="background-image: url(@ta.Attendee.AvatarSettings.AvatarUrl); background-size: @(ta.Attendee.AvatarSettings.Size + "%"); background-position: @(ta.Attendee.AvatarSettings.Left + "%") @(ta.Attendee.AvatarSettings.Top + "%");">
                            </div>
                            <div> @ta.Attendee.UserName</div>
                        </li>
                    }

                }
            </ul>
        </div>
    }
</div>
@code {
    [CascadingParameter]
    EventPage eventPage { get; set; }
    List<Team> Teams { get; set; }
    List<Attendee> AttendeesWithoutTeams { get; set; } = new List<Attendee>();

    Func<Task> myDelegate { get; set; }


    protected override void OnInitialized()
    {
        myDelegate = async () => await InvokeAsync(() =>
        {
            this.UpdateTeamsWithMeetupService();
            this.UpDateAttendeesWithoutTeams();
            this.StateHasChanged();
        });
        TeamsUpdateService.AddEvent(eventPage.pageEvent.Id, myDelegate);

        UpdateTeamsWithMeetupService();
        UpDateAttendeesWithoutTeams();
        base.OnInitialized();
    }

    void UpDateAttendeesWithoutTeams()
    {
        try
        {
            AttendeesWithoutTeams = MeetupService.GetAttendeesWithoutTeams(eventPage.pageEvent.Id);
        }
        catch
        {

        }

    }

    void UpdateTeamsWithMeetupService()
    {
        Teams = MeetupService.GetTeamsByEventId(eventPage.pageEvent.Id);
    }

    public void Dispose()
    {
        TeamsUpdateService.RemoveDelegate(eventPage.pageEvent.Id, myDelegate);
    }
}
