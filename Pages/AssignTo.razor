@inject MeetupService MeetupService
@inject TeamsUpdateService TeamsUpdateService
@*inspiration from https://chrissainty.com/investigating-drag-and-drop-with-blazor/*@



<h3>AssignTo</h3>


<div  
     @ondrop="() => HandleDropOnUsersWithoutATeam()"
     ondragover="event.preventDefault();"
     @ondragenter='() => OnEnterTeam(new Team { Id = "none"})'
 >
    <div >
    Users
</div>
    <ul >
        @foreach (Attendee a in GetAttendeesWithoutTeams())
        {
            if (a.AvatarSettings != null)
            {
                <li  @ondragstart="() => DragStartUser(a)" draggable="true" >
                    <div>
                    </div>
                    <div >@a.UserName</div>
                </li>

            }

        }
    </ul>
</div>


@foreach (Team t in at.Teams)
{
   
<div 
     @ondrop="() => HandleDropOnTeam(t)"
     ondragover="event.preventDefault();"
     @ondragenter="() =>OnEnterTeam(t)" 
   >
    <div >
        @t.Name
    </div>
    <ul >
        @foreach (TeamAttendee ta in t.Attendees)
        {
            if (ta.Attendee.AvatarSettings != null)
            {
                <li @ondragstart="() => DragStartUser(ta.Attendee,t)" draggable="true" >
                    <div >
                    </div>
                    <div>@ta.Attendee.UserName</div>
                </li>
            }

        }
    </ul>
</div>
   
}

@code {

    [CascadingParameter]
    AssignTeams at { get; set; }
    Team team { get; set; }

    Attendee DragStartAtt { get; set; }

    Team OnEnterTeamAcc { get; set; }

    public void DragStartUser(Attendee a, Team t = null)
    {
        team = t;
        DragStartAtt = a;
    }


    public void HandleDropOnUsersWithoutATeam()
    {
        if (team == null) return;
        MeetupService.RemoveAttendeeFromTeam(at.EventId, team.Id, DragStartAtt.Id);
        at.Teams = MeetupService.GetTeamsByEventId(at.EventId);
        TeamsUpdateService.InvokeUpdate(at.EventId);
        StateHasChanged();
    }


    public void HandleDropOnTeam(Team t)
    {
        if (t.Id == team?.Id) return;

        MeetupService.AddAttendeeToTeam(at.EventId, t.Id, DragStartAtt.Id);
        if (team != null)
        {
            MeetupService.RemoveAttendeeFromTeam(team.EventId, team.Id, DragStartAtt.Id);
        }
        at.Teams = MeetupService.GetTeamsByEventId(at.EventId);
        team = null;
        DragStartAtt = null;
        OnEnterTeamAcc = null;
        TeamsUpdateService.InvokeUpdate(at.EventId);
        StateHasChanged();

    }

    public void OnEnterTeam(Team t)
    {
        OnEnterTeamAcc = t;
    }

    List<Attendee> GetAttendeesWithoutTeams()
    {
        return MeetupService.GetAttendeesWithoutTeams(at.EventId);
    }

    public string ChangeColor(Team t)
    {
        if (team != null && team.Id == t.Id) return "";
        if (OnEnterTeamAcc != null && t.Id == OnEnterTeamAcc.Id) return "green";
        return "";
    }



}
