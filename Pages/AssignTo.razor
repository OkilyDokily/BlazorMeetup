@inject MeetupService MeetupService
@inject TeamsUpdateService TeamsUpdateService
@*inspiration from https://chrissainty.com/investigating-drag-and-drop-with-blazor/*@


<div class="teams-collection">
    <div class="team" @ondrop="() => HandleDropOnUsersWithoutATeam()" ondragover="event.preventDefault();"
        @ondragenter='() => OnEnterTeam(new Team { Id = "none"})'>
        <div>
            Users
        </div>
        <ul>
            @foreach (Attendee a in GetAttendeesWithoutTeams())
            {
                if (a.AvatarSettings != null)
                {
                    <li class="flex" @ondragstart="() => DragStartUser(a)" draggable="true">
                        <div class="avatar"
                    style='background-image: url(@a.AvatarSettings.AvatarUrl); background-size: @(a.AvatarSettings.Size + "%"); background-position: @(a.AvatarSettings.Left + "%") @(a.AvatarSettings.Top + "%");'>
                        </div>
                        <div>@a.UserName</div>
                    </li>
                }
            }
        </ul>
    </div>

    @foreach (Team t in at.Teams)
    {

        <div class="team" @ondrop="() => HandleDropOnTeam(t)" ondragover="event.preventDefault();"
        @ondragenter="() =>OnEnterTeam(t)">
            <div class="flex">
                <div class="avatar"
                style="background-image: url(@t.AvatarSettings.AvatarUrl); background-size: @(t.AvatarSettings.Size + "%"); background-position: @(t.AvatarSettings.Left + "%") @(t.AvatarSettings.Top + "%");">
                </div>
                <div>@t.Name</div>
            </div>
            <ul>
                @foreach (TeamAttendee ta in t.Attendees)
                {
                    if (ta.Attendee.AvatarSettings != null)
                    {
                        <li class="flex" @ondragstart="() => DragStartUser(ta.Attendee,t)" draggable="true">
                            <div class="avatar"
                    style='background-image: url(@ta.Attendee.AvatarSettings.AvatarUrl); background-size: @(ta.Attendee.AvatarSettings.Size + "%"); background-position: @(ta.Attendee.AvatarSettings.Left + "%") @(ta.Attendee.AvatarSettings.Top + "%");'>
                            </div>
                            <div>@ta.Attendee.UserName</div>
                        </li>
                    }
                }
            </ul>
        </div>
    }
</div>



@code {

    [CascadingParameter]
    AssignTeams at { get; set; }
    Team team { get; set; }

    Attendee DragStartAtt { get; set; }

    Team OnEnterTeamAcc { get; set; }


    protected override void OnInitialized()
    {

        base.OnInitialized();
    }

    public void DragStartUser(Attendee a, Team t = null)
    {
        team = t;
        DragStartAtt = a;
    }

    public void HandleDropOnUsersWithoutATeam()
    {
        if (team == null) return;
        MeetupService.RemoveAttendeeFromTeam(at.EventId, team.Id, DragStartAtt.Id);
        at.Teams = MeetupService.GetTeamsByEventId(at.EventId);
        TeamsUpdateService.InvokeUpdate(at.EventId);
        StateHasChanged();
    }

    public void HandleDropOnTeam(Team t)
    {
        if (t.Id == team?.Id) return;

        MeetupService.AddAttendeeToTeam(at.EventId, t.Id, DragStartAtt.Id);
        if (team != null)
        {
            MeetupService.RemoveAttendeeFromTeam(team.EventId, team.Id, DragStartAtt.Id);
        }
        at.Teams = MeetupService.GetTeamsByEventId(at.EventId);
        team = null;
        DragStartAtt = null;
        OnEnterTeamAcc = null;
        TeamsUpdateService.InvokeUpdate(at.EventId);
        StateHasChanged();

    }

    public void OnEnterTeam(Team t)
    {
        OnEnterTeamAcc = t;
    }

    List<Attendee> GetAttendeesWithoutTeams()
    {
        return MeetupService.GetAttendeesWithoutTeams(at.EventId);
    }

    public string ChangeColor(Team t)
    {
        if (team != null && team.Id == t.Id) return "";
        if (OnEnterTeamAcc != null && t.Id == OnEnterTeamAcc.Id) return "green";
        return "";
    }



}
