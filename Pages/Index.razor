@page "/"
@using System.Security.Claims;
@using Microsoft.AspNetCore.Identity;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<Attendee> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject MeetupService MeetupService
@inject NavigationManager NavigationManager


<div id="index" class="w-1/4 m-1">
    <AuthorizeView>
        <NotAuthorized>
            <a href="Identity/Account/Login">Log in</a>
        </NotAuthorized>
        <Authorized>
            <a href="#">@context.User.Identity.Name!</a>

            @if (asettings != null)
            {

                <div @onclick=GoToEdit class="lg-avatar" style='background-image: url(@asettings.AvatarUrl); background-size:
                @(asettings.Size
                + "%"); background-position:
                @(@asettings.Left + "%") @(@asettings.Top + "%");'>
                </div>
            }

            <CascadingValue Value=@this Name="IndexPage">
                <TabControl @ref="@TabControlRef">
                    <TabPage Text="Create Event">
                        <CreateEvent />
                    </TabPage>

                    <TabPage Text="Your Servers">
                        <YourServers />
                    </TabPage>

                    @if (EventId != "")
                    {
                        <TabPage Text="Event">
                            <EventPage EventId=@EventId />
                        </TabPage>
                    }

                </TabControl>
            </CascadingValue>


        </Authorized>
    </AuthorizeView>
</div>

@code {
    ClaimsPrincipal User { get; set; }
    List<Claim> Claims { get; set; }
    [CascadingParameter(Name = "DbUserId")]
    public string DbUserId { get; set; }
    AvatarSettings asettings { get; set; }
    public string EventId { get; set; } = "";
    public TabControl TabControlRef;
    public void GoToEdit()
    {
        NavigationManager.NavigateTo("/EditAvatar");
    }



    public void SetEventId(string id)
    {
        EventId = id;
        StateHasChanged();
    }

    protected async override Task OnParametersSetAsync()
    {
        if (DbUserId == null) return;
        if (DbUserId != null)
        {
            asettings = MeetupService.GetAvatarSettingsByUserId(DbUserId);
            if (asettings != null)
            {
                return;
            }
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        User = authState.User;

        if (User.Identity.IsAuthenticated)
        {

            if (DbUserId != null && asettings == null)
            {
                if (User.FindFirstValue("urn:discord:avatar:url") != null)
                {
                    string userURL = User.FindFirstValue("urn:discord:avatar:url");
                    MeetupService.AddAvatarSettings(new AvatarSettings
                    {
                        AttendeeId = DbUserId,
                        AvatarUrl = userURL,
                        Left = 0,
                        Top = 0,
                        Size = 100
                    });
                }
                else
                {
                    MeetupService.AddAvatarSettings(new AvatarSettings
                    {
                        AttendeeId = DbUserId,
                        AvatarUrl = "/avatars/blank-profile.webp",
                        Left = 0,
                        Top = 0,
                        Size = 100
                    });
                }
                asettings = MeetupService.GetAvatarSettingsByUserId(DbUserId);
            }
        }
    }


}
