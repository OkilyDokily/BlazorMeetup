@page "/"
@using System.Security.Claims;
@using System.Diagnostics
@using Microsoft.AspNetCore.Identity;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<Attendee> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject MeetupService MeetupService
@if (asettings != null)
{
    <style>
    #divimg {
        background: url(@asettings.AvatarUrl);
        width: 60px;
        height: 60px;
        border-radius: 50%;
        border: 1px black solid;
        background-repeat: no-repeat;
        background-color: #1fe0;
        background-size: @(asettings.Size + "%");
        background-position: @(asettings.Left + "%") @(asettings.Top + "%");
    }
    </style>
}

<h1>Hello, world!</h1>


Welcome to your new app.
<AuthorizeView>
    <NotAuthorized>
        <a href="Identity/Account/Login">Log in</a>
    </NotAuthorized>
    <Authorized>
        <a href="#">Hello, @context.User.Identity.Name!</a>
        <p>Bottom</p>
        <a href="Identity/Account/Logout">Log out</a>
        <div id="divimg">

        </div>
    </Authorized>
</AuthorizeView>


@code {

    string avatar;
    ClaimsPrincipal User { get; set; }
    List<Claim> Claims { get; set; }
    Attendee DbUser { get; set; }
    AvatarSettings asettings { get; set; }
    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;

        if (User.Identity.IsAuthenticated)
        {

            DbUser = await UserManager.GetUserAsync(User);
            asettings = MeetupService.GetAvatarSettingsByUserId(DbUser.Id);
            if (DbUser != null && asettings == null)
            {
                if (User.FindFirstValue("urn:discord:avatar:url") != null)
                {
                    string userURL = User.FindFirstValue("urn:discord:avatar:url");
                    MeetupService.AddAvatarSettings(new AvatarSettings { AttendeeId = DbUser.Id, AvatarUrl = userURL, Left = 0, Top = 0, Size = 100 });
                }
                else
                {
                    string userURL = User.FindFirstValue("urn:discord:avatar:url");
                    MeetupService.AddAvatarSettings(new AvatarSettings { AttendeeId = DbUser.Id, AvatarUrl = "/avatars/blank-profile.webp", Left = 0, Top = 0, Size = 100 });
                }
            }


        }

    }
}
