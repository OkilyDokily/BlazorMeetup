<h3>Suggest Date</h3>
@inject MeetupService MeetupService
@inject IJSRuntime IJSRunTime
@inject NavigationManager NavigationManager

@if (eventPage.CurrentEvent.RestrictDates == null || eventPage.CurrentEvent.RestrictDates.Count == 0)
{
    @* var tm = new TimeMaker();
        <InputDate class="mx-1" @bind-Value="@tm.Date" /> *@
}
@foreach (RestrictDate restrictDate in eventPage.CurrentEvent.RestrictDates)
{
    timeMakeDictionary.TryAdd(restrictDate.Id, new TimeMaker());
    <EditForm Model=@timeMakeDictionary[@restrictDate.Id] OnValidSubmit="() => SuggestADate(restrictDate.Id)">

        <div>@restrictDate.Date.ToString()</div>


        <select @bind="@timeMakeDictionary[@restrictDate.Id].Hours">
            @foreach (int num in
           @timeMakeDictionary[@restrictDate.Id].GetHours(MeetupService.GetRestrictDateById(restrictDate.Id)?.TimesAlloweds?.ToList()))
            {
                <option value="@num">@(num == 0 ? "12AM" : (num == 12) ? "12PM" : (num - 12) < 0 ? num + "AM" : (num -12) +
            "PM")</option>
            }
        </select>
        <select @bind="@timeMakeDictionary[@restrictDate.Id].Minutes">
            @foreach (int i in @timeMakeDictionary[@restrictDate.Id].GetMinutes(@timeMakeDictionary[@restrictDate.Id].Hours,
           MeetupService.GetRestrictDateById(restrictDate.Id)?.TimesAlloweds?.ToList()))
            {
                <option value="@i">@(i == 0 ? "00" : i)</option>
            }
        </select>
        <button>Suggest a time for this date</button>
    </EditForm>

    if (DbUserId != null)
    {
        @foreach (SuggestedDate sd in restrictDate.SuggestedDates)
        {
            Console.WriteLine(sd.Id + " id in suggest dates in suggestdate.razor");
            @if (CanAttend(sd))
            {
                <div @onclick="()=>SeeAvailableUser(sd)" @key="@("suggest" + sd.Id)">@sd.DateTime @sd.Attendee.UserName <input
        type="checkbox" @onclick:stopPropagation="true" checked @onchange="() => RemoveSuggestedDateFromAttendee(sd)">
                </div>
            }
            else
            {
                <div @onclick="()=>SeeAvailableUser(sd)" @key="@("suggest" + sd.Id + "end")">@sd.DateTime
                    @sd.Attendee.UserName <input type="checkbox" @onclick:stopPropagation="true"
        @onchange="() => AddSuggestedDateToAttendee(sd)"></div>
            }
        }
    }
}


@code {
    [CascadingParameter]
    EventPage eventPage { get; set; }

    [CascadingParameter(Name = "DbUserId")]
    public string DbUserId { get; set; }


    [Parameter]
    public string Id { get; set; }


    public Dictionary<string, TimeMaker> timeMakeDictionary = new();

    bool CanAttend(SuggestedDate sd)
    {
        Console.WriteLine(DbUserId + " DbUserId can attend");
        bool b = MeetupService.CanAttend(sd, DbUserId);
        return b;
    }

    public void SeeAvailableUser(SuggestedDate sd)
    {
        NavigationManager.NavigateTo("/AvailableUsers/" + sd.Id);
    }

    public void RemoveSuggestedDateFromAttendee(SuggestedDate sd)
    {
        MeetupService.RemoveSuggestedDateFromAttendees(sd, DbUserId);
    }

    public void AddSuggestedDateToAttendee(SuggestedDate sd)
    {
        MeetupService.AddSuggestedDateToAttendees(sd, DbUserId);
    }

    protected override void OnInitialized()
    {



    }

    public void SuggestADate(string restrictDateId)
    {
        Console.WriteLine(DbUserId + " DbUserId called on suggestadate method in suggestdate.razor");

        SuggestedDate suggested = new SuggestedDate();
        suggested.EventId = eventPage.CurrentEvent.Id;
        suggested.AttendeeId = DbUserId;
        DateTime d = timeMakeDictionary[restrictDateId].MakeTime();
        suggested.DateTime = d;
        suggested.RestrictDateId = restrictDateId;
        MeetupService.SuggestDate(suggested);
        IJSRunTime.CreateMessage("You've successfully suggested a new date.");
        eventPage.CurrentEvent = MeetupService.GetEventById(eventPage.CurrentEvent.Id);

        StateHasChanged();
    }

    public string StripTimeFromRestictDate(DateTime dateTime)
    {
        return "";
    }
}
