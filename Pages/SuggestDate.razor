<h3>Suggest Date</h3>
@inject MeetupService MeetupService
@inject IJSRuntime IJSRunTime
@inject NavigationManager NavigationManager
<EditForm Model=@tm OnValidSubmit="@SuggestADate">
    <select @bind="@tm.Hours">
        @foreach (int num in tm.GetHours())
        {
            <option value="@num">@num</option>
        }
    </select>
    <select @bind="@tm.Minutes">
        @foreach (int num in tm.GetMinutes())
        {
            <option value="@num">@num</option>
        }
    </select>
    <select @bind="@tm.Date">
        @foreach (RestrictDate rd in PageEvent.RestrictDates)
        {
            <option value="@rd.Date">@rd.Date.ToString()</option>
        }
    </select>
    <button>Suggest a time for this date</button>
</EditForm>


@foreach (SuggestedDate sd in PageEvent.SuggestedDates)
{
    @if (CanAttend(sd))
    {
        <div @onclick="()=>SeeAvailableUser(sd)" @key="sd.Id">@sd.DateTime @sd.Attendee.UserName  <input type="checkbox" @onclick:stopPropagation="true" checked @onchange="() => RemoveSuggestedDateFromAttendee(sd)"></div>
    }
    else
    {
        <div @onclick="()=>SeeAvailableUser(sd)" @key="sd.Id">@sd.DateTime @sd.Attendee.UserName  <input type="checkbox" @onclick:stopPropagation="true" @onchange="() => AddSuggestedDateToAttendee(sd)"></div>
    }
}


@code {
    [Parameter]
    public Event PageEvent { get; set; }
    [Parameter]
    public string LoggedInId { get; set; }
    [Parameter]
    public EventCallback UpdateEvent { get; set; }
    SuggestedDate suggested = new SuggestedDate();
    [Parameter]
    public string Id { get; set; }

    TimeMaker tm = new TimeMaker();


    bool CanAttend(SuggestedDate sd)
    {
        bool b = MeetupService.CanAttend(sd, LoggedInId);
        return b;
    }

    public void SeeAvailableUser(SuggestedDate sd)
    {
        NavigationManager.NavigateTo("/AvailableUsers/" + sd.Id);
    }


    public void RemoveSuggestedDateFromAttendee(SuggestedDate sd)
    {
        MeetupService.RemoveSuggestedDateFromAttendees(sd, LoggedInId);
    }

    public void AddSuggestedDateToAttendee(SuggestedDate sd)
    {
        MeetupService.AddSuggestedDateToAttendees(sd, LoggedInId);
    }

    protected override void OnInitialized()
    {
        suggested.EventId = PageEvent.Id;
        suggested.AttendeeId = LoggedInId;
    }

    async void SuggestADate()
    {
        DateTime d = tm.MakeTime();
        suggested.DateTime = d;
        MeetupService.SuggestDate(suggested);
        IJSRunTime.CreateMessage("You've successfully suggested a new date.");
        await UpdateEvent.InvokeAsync();
        tm = new TimeMaker();
        StateHasChanged();
    }
}
