<h3>Suggest Date</h3>
@inject MeetupService MeetupService
@inject IJSRuntime IJSRunTime

<EditForm Model=@suggested OnValidSubmit="@SuggestADate">
    <input type="datetime" @bind-value="suggested.DateTime" />
    <button>Suggest a date and time</button>
</EditForm>


@foreach (SuggestedDate sd in PageEvent.SuggestedDates)
{
    @if (CanAttend(sd))
    {
        <div @key="sd.Id">@sd.DateTime @sd.IdentityUser.UserName  <input type="checkbox" checked  @onchange="() => RemoveSuggestedDateFromAttendeeEvent(sd)"></div>
    }
    else
    {
        <div @key="sd.Id">@sd.DateTime @sd.IdentityUser.UserName  <input type="checkbox"   @onchange="() => AddSuggestedDateToAttendeeEvent(sd)"></div>
    }

}



@code {
    [Parameter]
    public Event PageEvent { get; set; }
    [Parameter]
    public string LoggedInId { get; set; }
    SuggestedDate suggested = new SuggestedDate();
    [Parameter]
    public string Id { get; set; }


    bool CanAttend(SuggestedDate sd)
    {
        bool b = MeetupService.CanAttend(sd,LoggedInId);
        return b;
    }


    public void RemoveSuggestedDateFromAttendeeEvent(SuggestedDate sd)
    {
        MeetupService.RemoveSuggestedDateFromAttendeeEvents(sd, LoggedInId);
    }

    public void AddSuggestedDateToAttendeeEvent(SuggestedDate sd)
    {
        MeetupService.AddSuggestedDateToAttendeeEvents(sd, LoggedInId);
    }

    protected override void OnInitialized()
    {
        suggested.EventId = PageEvent.Id;
        suggested.IdentityUserId = LoggedInId;
    }

    void SuggestADate()
    {
        MeetupService.SuggestDate(suggested);
        IJSRunTime.CreateMessage("You've successfully suggested a new date.");
    }
}
