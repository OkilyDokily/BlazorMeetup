<h3>Suggest Date</h3>
@inject MeetupService MeetupService
@inject IJSRuntime IJSRunTime
@inject NavigationManager NavigationManager



<EditForm Model=@tm OnValidSubmit="@SuggestADate">
    @if (eventPage.pageEvent.RestrictDates == null || eventPage.pageEvent.RestrictDates.Count == 0)
    {
        <InputDate class="mx-1" @bind-Value="@tm.Date" />
    }
    else
    {
        <select @bind="@RestrictDateId">
            @foreach (RestrictDate rd in eventPage.pageEvent.RestrictDates)
            {
                <option value="@rd.Id">@rd.Date.ToString()</option>
            }
        </select>
    }

    <select @bind="@tm.Hours">
        @foreach (int num in tm.GetHours(MeetupService.GetRestrictDateById(RestrictDateId)?.TimesAlloweds?.ToList()))
        {
            <option value="@num">@(num == 0 ? "12AM" : (num == 12) ? "12PM" : (num - 12) < 0 ? num + "AM" : (num -12) +
            "PM")</option>
        }
    </select>
    <select @bind="@tm.Minutes">
        @foreach (int i in tm.GetMinutes(tm.Hours,
        MeetupService.GetRestrictDateById(RestrictDateId)?.TimesAlloweds?.ToList()))
        {
            <option value="@i">@(i == 0 ? "00" : i)</option>
        }
    </select>
    <button>Suggest a time for this date</button>
</EditForm>


@foreach (SuggestedDate sd in eventPage.pageEvent.SuggestedDates)
{
    @if (CanAttend(sd))
    {
        <div @onclick="()=>SeeAvailableUser(sd)" @key="sd.Id">@sd.DateTime @sd.Attendee.UserName <input type="checkbox"
        @onclick:stopPropagation="true" checked @onchange="() => RemoveSuggestedDateFromAttendee(sd)"></div>
    }
    else
    {
        <div @onclick="()=>SeeAvailableUser(sd)" @key="sd.Id">@sd.DateTime @sd.Attendee.UserName <input type="checkbox"
        @onclick:stopPropagation="true" @onchange="() => AddSuggestedDateToAttendee(sd)"></div>
    }
}

@code {
    [CascadingParameter]
    EventPage eventPage { get; set; }

    [Parameter]
    public string LoggedInId { get; set; }

    SuggestedDate suggested = new SuggestedDate();
    [Parameter]
    public string Id { get; set; }

    TimeMaker tm = new TimeMaker();

    string RestrictDateId;


    bool CanAttend(SuggestedDate sd)
    {
        bool b = MeetupService.CanAttend(sd, LoggedInId);
        return b;
    }

    public void SeeAvailableUser(SuggestedDate sd)
    {
        NavigationManager.NavigateTo("/AvailableUsers/" + sd.Id);
    }

    public void RemoveSuggestedDateFromAttendee(SuggestedDate sd)
    {
        MeetupService.RemoveSuggestedDateFromAttendees(sd, LoggedInId);
    }

    public void AddSuggestedDateToAttendee(SuggestedDate sd)
    {
        MeetupService.AddSuggestedDateToAttendees(sd, LoggedInId);
    }

    protected override void OnInitialized()
    {
        suggested.EventId = eventPage.pageEvent.Id;
        suggested.AttendeeId = LoggedInId;
        if (eventPage.pageEvent.RestrictDates.Count != 0 && eventPage.pageEvent.RestrictDates != null)
        {
            RestrictDateId = eventPage.pageEvent.RestrictDates.First().Id;
            tm.Hours = tm.GetHours(MeetupService.GetRestrictDateById(RestrictDateId).TimesAlloweds.ToList()).FirstOrDefault();
            tm.Minutes = tm.GetMinutes(tm.Hours,
            MeetupService.GetRestrictDateById(RestrictDateId).TimesAlloweds.ToList()).FirstOrDefault();
        }
        else
        {
            tm.Hours = 0;
        }
    }

    public void SuggestADate()
    {
        DateTime d = tm.MakeTime();
        suggested.DateTime = d;
        MeetupService.SuggestDate(suggested);
        IJSRunTime.CreateMessage("You've successfully suggested a new date.");
        eventPage.pageEvent = MeetupService.GetEventById(eventPage.pageEvent.Id);
        tm = new TimeMaker();
        StateHasChanged();
    }

}
