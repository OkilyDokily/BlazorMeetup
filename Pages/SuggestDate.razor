@using System.Globalization
@inject MeetupService MeetupService
@inject IJSRuntime IJSRunTime
@inject NavigationManager NavigationManager

@if (eventPage.CurrentEvent.RestrictDates == null || eventPage.CurrentEvent.RestrictDates.Count == 0)
{
    <p>The event creator has not supplied any dates to suggest a time</p>
}
@foreach (RestrictDate restrictDate in eventPage.CurrentEvent.RestrictDates)
{

    timeMakeDictionary.TryAdd(restrictDate.Id, new
    TimeMaker());
    <div class="mb-10">
        <EditForm Model=@timeMakeDictionary[@restrictDate.Id] OnValidSubmit="() => SuggestADate(restrictDate.Id)">

            <div class="text-2xl">@restrictDate.Date.ToString("M/dd/yyyy", CultureInfo.InvariantCulture)</div>
            @* Hours *@

            @if (!FirstRender)
            {
                timeMakeDictionary[@restrictDate.Id].Hours
                =
                TimeMaker.GetHours(MeetupService.GetRestrictDateById(restrictDate.Id)?.TimesAlloweds?.ToList()).First();
            }

            <select @bind="@timeMakeDictionary[@restrictDate.Id].Hours">
              
                @foreach (int num in
               @TimeMaker.GetHours(MeetupService.GetRestrictDateById(restrictDate.Id)?.TimesAlloweds?.ToList()))
                {

                    <option value="@num">@(num == 0 ? "12AM" : (num == 12) ? "12PM" : (num - 12) < 0 ? num + "AM" : (num - 12) +
                "PM")</option>

                }
            </select>
            Minutes

            @if (!FirstRender)
            {
                timeMakeDictionary[@restrictDate.Id].Minutes
                =
                TimeMaker.GetMinutes(@timeMakeDictionary[@restrictDate.Id].Hours,
                MeetupService.GetRestrictDateById(restrictDate.Id)?.TimesAlloweds?.ToList()).First();
            }
            <select @bind="@timeMakeDictionary[@restrictDate.Id].Minutes">
                @foreach (int i in

               @TimeMaker.GetMinutes(@timeMakeDictionary[@restrictDate.Id].Hours,
               MeetupService.GetRestrictDateById(restrictDate.Id)?.TimesAlloweds?.ToList()))
                {

                    <option value="@i">@(i == 0 ? "00" : i)</option>
                }
            </select>

            <button>Suggest a time for this date</button>
        </EditForm>

        @if (DbUserId != null)
        {
            @foreach (SuggestedDate sd in restrictDate.SuggestedDates)
            {
                if (sd.Attendee == null)
                {
                    Console.WriteLine("itttss nullll");
                }

                @if (CanAttend(sd))
                {
                    <div class="cursor-pointer" @onclick="()=>SeeAvailableUser(sd)" @key="@("suggest" + sd.Id)">
                        @sd.DateTime.ToString("hh:mm tt")
                        @sd.Attendee.UserName <input type="checkbox" @onclick:stopPropagation="true" checked
            @onchange="() => RemoveSuggestedDateFromAttendee(sd)">
                    </div>
                }
                else
                {
                    <div class="cursor-pointer" @onclick="()=>SeeAvailableUser(sd)" @key="@("suggest" + sd.Id + "end")">
                        @sd.DateTime.ToString("hh:mm tt")
                        @sd.Attendee.UserName <input type="checkbox" @onclick:stopPropagation="true"
            @onchange="() => AddSuggestedDateToAttendee(sd)"></div>
                }
            }
        }
    </div>
}

@code {
    [CascadingParameter]
    EventPage eventPage { get; set; }

    [CascadingParameter(Name = "DbUserId")]
    public string DbUserId { get; set; }

    public bool FirstRender { get; set; } = false;

    [Parameter]
    public string Id { get; set; }


    public Dictionary<string, TimeMaker> timeMakeDictionary = new();

    bool CanAttend(SuggestedDate sd)
    {
        bool b = MeetupService.CanAttend(sd, DbUserId);
        return b;
    }

    public void SeeAvailableUser(SuggestedDate sd)
    {
        NavigationManager.NavigateTo("/AvailableUsers/" + eventPage.CurrentEvent.Id + "/" + sd.Id);
    }

    public void RemoveSuggestedDateFromAttendee(SuggestedDate sd)
    {
        MeetupService.RemoveSuggestedDateFromAttendees(sd, DbUserId);
    }

    public void AddSuggestedDateToAttendee(SuggestedDate sd)
    {
        MeetupService.AddSuggestedDateToAttendees(sd, DbUserId);
    }

    public void SuggestADate(string restrictDateId)
    {
        SuggestedDate suggested = new SuggestedDate();
        suggested.AttendeeId = DbUserId;
        DateTime d = timeMakeDictionary[restrictDateId].MakeTime();
        suggested.DateTime = d;
        suggested.RestrictDateId = restrictDateId;
        MeetupService.SuggestDate(suggested);
        IJSRunTime.CreateMessage("You've successfully suggested a new date.");
        eventPage.CurrentEvent = MeetupService.GetEventById(eventPage.CurrentEvent.Id);

        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            FirstRender = true;
        }
    }

}
