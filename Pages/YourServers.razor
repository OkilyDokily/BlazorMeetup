@page "/YourServers"
@attribute [Authorize]
@inject MeetupService MeetupService
@inject NavigationManager NavigationManager
@using BlazorMeetup.Data
@using System.Linq


<h3>Sorted By Most Recent</h3>

<table>
    <thead>
        <tr>
            <th>Servers</th>
        </tr>
    </thead>
    <tbody>
        @foreach (string serverId in serverIdsWithUserEvents)
        {
            <tr @onclick='() => ToggleEvents(serverId)'>
                <td>@serverEventDictionary[serverId].Server.Name</td>
                <ul class="block">
                    @if (serverEventDictionary[serverId].EventsShown)
                    {
                        @if (!serverEventDictionary[serverId].EventsLoaded)
                        {
                            serverEventDictionary[serverId].AddEvents(serverId);
                        }
                        @foreach (Event ev in serverEventDictionary[serverId].EventsInServerWithUser)
                        {
                            <li @onclick='()=> GoToEventPage(ev.Id)'>@ev.Description</li>
                        }
                        @foreach (Event ev in serverEventDictionary[serverId].EventsInServerWithoutUser)
                        {
                            <li @onclick='()=> GoToEventPage(ev.Id)'>@ev.Description</li>
                        }
                    }
                </ul>
            </tr>
        }
        <hr class="border">
        @foreach (string serverId in serverIdsWithEventsNoUser)
        {
            <tr @onclick='() => ToggleEvents(serverId)'>
                <td>@serverEventDictionary[serverId].Server.Name</td>
                <ul class="block">
                    @if (serverEventDictionary[serverId].EventsShown)
                    {
                        @if (!serverEventDictionary[serverId].EventsLoaded)
                        {
                            serverEventDictionary[serverId].AddEvents(serverId);
                        }

                        @foreach (Event ev in serverEventDictionary[serverId].EventsInServerWithoutUser)
                        {
                            <li @onclick='()=> GoToEventPage(ev.Id)'>@ev.Description</li>
                        }
                    }
                </ul>
            </tr>
        }
        <hr class="border">
        @foreach (string serverId in serverIdsWithoutEvents)
        {
            <tr>
                <td>@serverEventDictionary[serverId].Server.Name</td>
            </tr>
        }
        <hr>
    </tbody>
</table>

@code
{
    [CascadingParameter(Name = "DbUserId")]
    public string DbUserId { get; set; }
    List<Server> Servers = new();

    public Dictionary<string, InternalHelperClass> serverEventDictionary = new();

    List<string> serverIdsWithUserEvents = new();
    List<string> serverIdsWithEventsNoUser = new();
    List<string> serverIdsWithoutEvents = new();

    protected async override Task OnInitializedAsync()
    {
        Servers = MeetupService.GetServersByUserId(DbUserId);

        InternalHelperClass.MeetupService = MeetupService;
        InternalHelperClass.DbUserId = DbUserId;

        foreach (var server in Servers)
        {
            serverEventDictionary.Add(server.Id, new InternalHelperClass(server));
        }
        GetOrderedServerIds();
        StateHasChanged();
    }




    public void GoToEventPage(string id)
    {
        NavigationManager.NavigateTo("/EventPage/" + id);
    }
    void ToggleEvents(string id)
    {

        serverEventDictionary[id].EventsShown = !serverEventDictionary[id].EventsShown;
    }

    public void GetOrderedServerIds()
    {
        List<Event> Events = MeetupService.GetYourEvents(DbUserId);
        serverIdsWithUserEvents = Events.GroupBy(x => x.Server.Id).Select(x => x.Key).ToList();


        serverIdsWithEventsNoUser = Servers.Where(x => !serverIdsWithUserEvents.Any(y => x.Id ==
        y)).Where(x => x.Events.Count > 0).Select(x => x.Id).ToList();


        serverIdsWithoutEvents = Servers.Where(x => x.Events.Count == 0).Select(x => x.Id).ToList();


    }

    public class InternalHelperClass
    {
        public static string DbUserId { get; set; }
        public static MeetupService MeetupService { get; set; }
        public Server Server { get; }
        public bool EventsLoaded { get; set; } = false;
        public bool EventsShown { get; set; } = false;

        public List<Event> EventsInServerWithUser { get; set; }
        public List<Event> EventsInServerWithoutUser { get; set; }

        public void OrderEvents()
        {

        }
        public InternalHelperClass(Server s)
        {
            Server = s;
        }

        public void AddEvents(string serverId)
        {
            List<Event> eventsInServer = Server.Events.ToList();
            EventsInServerWithUser = eventsInServer.Where(x => x.AttendeeId == DbUserId).ToList();
            EventsInServerWithoutUser = eventsInServer.Where(x => !(x.AttendeeId == DbUserId)).ToList();
        }
    }
}
