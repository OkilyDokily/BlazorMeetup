@page "/EventPage/{userId}/{id}"
@using BlazorMeetup.Data
@using Microsoft.AspNetCore.Components.Web
@inject UserManager<Attendee> UserManager
@*@attribute [Authorize]*@
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject MeetupService MeetupService
@inject UserManager<Attendee> UserManager
@inject NavigationManager NavigationManager

<TabControl>
    <TabPage Text="Main">
        <h3>Event</h3>
        @pageEvent.DateAndTime
        <h3>Attendees</h3>
        @foreach (AttendeeEvent ae in pageEvent.Attendees)

        {
            @if (ae.AttendeeId == LoggedInUser.Id)
            {
                @if (ae.CanAttendProposedDate == true)
                {
                    <div @key="ae.Id">@ae.Attendee.UserName  <input type="checkbox" checked value="@ae.CanAttendProposedDate" @onchange="() => OnChange(ae.Id)"><div style="display:inline" @onclick="Leave">leave</div></div>
                }
                else
                {
                    <div @key="ae.Id">@ae.Attendee.UserName  <input type="checkbox" value="@ae.CanAttendProposedDate" @onchange="() => OnChange(ae.Id)"><div style="display:inline" @onclick="Leave">leave</div></div>
                }
            }
            else
            {
                @if (ae.CanAttendProposedDate)
                {
                    <div @key="ae.Id">@ae.Attendee.UserName<i class="oi oi-check"></i></div>
                }
                else
                {
                    <div @key="ae.Id">@ae.Attendee.UserName</div>
                }
            }
        }
        @if (!MeetupService.AttendeeEventExists(LoggedInUser.Id, id))
        {
        <button @onclick="() => JoinEvent()">I'm Interested</button>
        }

        <button @onclick="() => GoBack()">User Event List</button>
        @if (userId == LoggedInUser.Id)
        {
            <button @onclick="DeleteEvent">Delete Event</button>
        }
    </TabPage>
    @if (pageEvent.AttendeeId == LoggedInUser.UserName)
    {
        <TabPage Text="Change Proposed Date">
            <DifferentDate PageEvent=@pageEvent />
        </TabPage>
    }
    @if (pageEvent.Attendees.Any(a => a.AttendeeId == LoggedInUser.Id))
    {
        <TabPage Text="Suggest a time for available dates">
            <SuggestDate UpdateEvent="@UpdateEvent" PageEvent=@pageEvent LoggedInId="@LoggedInUser.Id" />
        </TabPage>
    }

</TabControl>
    @code {

            Event pageEvent { get; set; }
            [Parameter]
            public string userId { get; set; }
            [Parameter]
            public string id { get; set; }
            Event created = new();
            Attendee LoggedInUser { get; set; }


        protected override async Task OnInitializedAsync()
        {
            var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            pageEvent = MeetupService.GetEventById(id);
            LoggedInUser = await UserManager.GetUserAsync(auth.User);
        }

        void GoBack()
        {
            NavigationManager.NavigateTo("/UserEvents/" + userId);
        }

        void JoinEvent()
        {
            MeetupService.JoinEvent(LoggedInUser.Id, id);
            pageEvent = MeetupService.GetEventById(id);
            StateHasChanged();
        }

        void Leave()
        {
            MeetupService.LeaveEvent(LoggedInUser.Id, id);
            pageEvent = MeetupService.GetEventById(id);
            StateHasChanged();
        }

        void DeleteEvent()
        {
            MeetupService.DeleteEvent(pageEvent);
            GoBack();
        }

        void OnChange(string id)
        {
            MeetupService.ChangeCanAttendInitialDate(id);

        }

        public void UpdateEvent()
        {
            pageEvent = MeetupService.GetEventById(pageEvent.Id);
            StateHasChanged();
        }


    }
