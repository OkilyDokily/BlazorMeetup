@page "/EventPage/{userId}/{id}"
@using BlazorMeetup.Data
@inject UserManager<Attendee> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject MeetupService MeetupService
@inject UserManager<Attendee> UserManager
@inject NavigationManager NavigationManager


<CascadingValue Value="this">
    <TabControl>
        <TabPage Text="Main">
            <h3>Event</h3>
            @pageEvent.DateAndTime
            <h3>Attendees</h3>
            @foreach (AttendeeEvent ae in pageEvent.Attendees)

            {
                if (ae.Attendee.AvatarSettings != null)
                {
                    @if (ae.AttendeeId == LoggedInUser.Id)
                    {
                        @if (ae.CanAttendProposedDate == true)
                        {
                            <div @key="ae.Id" class="avatar"
                style="background-image: url(@ae.Attendee.AvatarSettings.AvatarUrl); background-size: @(ae.Attendee.AvatarSettings.Size + "%"); background-position: @(ae.Attendee.AvatarSettings.Left + "%") @(ae.Attendee.AvatarSettings.Top + "%");">
                            </div>
                            @ae.Attendee.UserName
                            <input type="checkbox" checked value="@ae.CanAttendProposedDate" @onchange="() => OnChange(ae.Id)">
                            <div style="display:inline" @onclick="Leave">leave</div>
                        }
                        else
                        {
                            <div @key="ae.Id" class="avatar"
                style="background-image: url(@ae.Attendee.AvatarSettings.AvatarUrl); background-size: @(ae.Attendee.AvatarSettings.Size + "%"); background-position: @(ae.Attendee.AvatarSettings.Left + "%") @(ae.Attendee.AvatarSettings.Top + "%");">
                            </div>
                            @ae.Attendee.UserName
                            <input type="checkbox" value="@ae.CanAttendProposedDate" @onchange="() => OnChange(ae.Id)">
                            <div style="display:inline" @onclick="Leave">leave</div>
                        }
                    }
                    else
                    {
                        @if (ae.CanAttendProposedDate)
                        {
                            <div @key="ae.Id" class="avatar"
                style="background-image: url(@ae.Attendee.AvatarSettings.AvatarUrl); background-size: @(ae.Attendee.AvatarSettings.Size + "%"); background-position: @(ae.Attendee.AvatarSettings.Left + "%") @(ae.Attendee.AvatarSettings.Top + "%");">
                            </div>
                            @ae.Attendee.UserName
                        }
                        else
                        {
                            <div @key="ae.Id" class="avatar"
                style="background-image: url(@ae.Attendee.AvatarSettings.AvatarUrl); background-size: @(ae.Attendee.AvatarSettings.Size + "%"); background-position: @(ae.Attendee.AvatarSettings.Left + "%") @(ae.Attendee.AvatarSettings.Top + "%");">
                            </div>
                            @ae.Attendee.UserName
                        }
                    }
                }
            }
            <div>
                @if (!MeetupService.AttendeeEventExists(LoggedInUser.Id, Id))
                {
                    <button @onclick="() => JoinEvent()">I'm Interested</button>
                }
                <button @onclick="() => GoBack()">Go back to user's list</button>
                <button @onclick='() => NavigationManager.NavigateTo("/AssignTeams/" + Id)'>Assign Users To
                    Teams</button>
            </div>
        </TabPage>

        <TabPage Text="Suggest a time for available dates">
            <SuggestDate LoggedInId="@LoggedInUser.Id" />
        </TabPage>

        <TabPage Text="See who is on which team">
            <ShowTeams />
        </TabPage>
    </TabControl>
</CascadingValue>
@code {


    [Parameter]
    public string UserId { get; set; }
    [Parameter]
    public string Id { get; set; }
    public Event pageEvent { get; set; }
    Attendee LoggedInUser { get; set; }

    protected override void OnParametersSet()
    {
        pageEvent = MeetupService.GetEventById(Id);
    }

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        LoggedInUser = await UserManager.GetUserAsync(auth.User);
    }

    void GoBack()
    {
        NavigationManager.NavigateTo("/UserEvents/" + UserId);
    }

    void JoinEvent()
    {
        MeetupService.JoinEvent(LoggedInUser.Id, Id);
        pageEvent = MeetupService.GetEventById(Id);
        StateHasChanged();
    }

    void Leave()
    {
        MeetupService.LeaveEvent(LoggedInUser.Id, Id);
        pageEvent = MeetupService.GetEventById(Id);
        StateHasChanged();
    }


    void OnChange(string id)
    {
        MeetupService.ChangeCanAttendInitialDate(id);
    }

}
