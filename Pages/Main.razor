@inject MeetupService MeetupService;
@inject IJSRuntime IJSRunTime
@inject UpdateServers UpdateServers


<EditForm Model="@ParentEvent" class="w-full" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-item">
        <label>Description</label>
        <InputTextArea rows="5" @bind-Value="ParentEvent.Description" />
    </div>
    <div class="form-item">
        <label>Maximum Attendees</label>
        <InputNumber class="w-auto" @bind-Value="ParentEvent.MaximumAttendees" />
    </div>
    <div class="form-item">
        <label>Minimum Attendees</label>
        <InputNumber class="w-auto" @bind-Value="ParentEvent.MinimumAttendees" />
    </div>

    <div>
        <label>Length of Event</label>
        <select @bind="@ParentEvent.Hours">
            @foreach (int num in TimeMaker.GetHours())
            {
                <option value="@num">@num</option>
            }
        </select>
        <select @bind="@ParentEvent.Minutes">
            @foreach (int num in TimeMaker.GetMinutes())
            {
                <option value="@num">@num</option>
            }
        </select>
    </div>
    <div>
        <select @bind="ParentEvent.ServerId">

            @for (int index = 0; index < servers.Count; index++)
            {
                <option value=@servers[index].Server.Id>@servers[index].Server.Name</option>
            }

        </select>
    </div>

    <button>@(ParentEvent.Id != null ? "Edit Event" : "Create Event")</button>
</EditForm>
@code {

    [Parameter]
    public Event ParentEvent { get; set; }
    [CascadingParameter(Name = "DbUserId")]
    public string DbUserId { get; set; }
    [CascadingParameter(Name = "CreateEventAcc")]
    public CreateEvent CreateEventAcc { get; set; }
    [Parameter]
    public TabControl TabControlAcc { get; set; }
    public List<ServerAttendee> servers { get; set; }

    public TimesAllowed ta = new TimesAllowed();

    public TimeMaker tm = new TimeMaker();

    protected override void OnParametersSet()
    {
        servers = MeetupService.GetServersByUserId(DbUserId);
        StateHasChanged();
        base.OnParametersSet();
    }


    private void HandleValidSubmit()
    {
        ParentEvent.AttendeeId = DbUserId;
        if (ParentEvent.ServerId == null)
        {
            ParentEvent.ServerId = servers[0].Server.Id;
        }
        MeetupService.CreateEvent(ParentEvent);
        if (ParentEvent.Id != null)
        {
            IJSRunTime.CreateMessage("You've successfully edited a new event.");
        }
        else
        {
            IJSRunTime.CreateMessage("You've successfully created an event.");
        }

        CreateEventAcc.UpdateCreated();

        TabControlAcc.ActivatePageByText("Date Range >>");
        TabControlAcc.EnableClickByString("Date Range >>");
        UpdateServers.InvokeUpdate();
        StateHasChanged();
    }
}
