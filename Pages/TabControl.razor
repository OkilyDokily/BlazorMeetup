<CascadingValue Value="this">
    <div role="group">
        @foreach (TabPage tabPage in Pages)
        {
            <button type="button" class="tab-button @GetButtonClass(tabPage)" @onclick=@Clickable(tabPage)>
                @tabPage.Text
            </button>
        }
    </div>
    @ChildContent
</CascadingValue>
@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public bool ButtonsWork { get; set; } = true;
    public TabPage ActivePage { get; set; }

    public List<TabPage> Pages = new List<TabPage>();
    internal void AddPage(TabPage tabPage)
    {
        Pages.Add(tabPage);
        if (Pages.Count == 1)
            ActivePage = tabPage;
        StateHasChanged();
    }

    string GetButtonClass(TabPage page)
    {
        if (!ButtonsWork) return "bg-gray-200";
        return page == ActivePage ? "bg-blue-700 text-color-700" : "";
    }

    public void ActivatePage(TabPage page)
    {
        ActivePage = page;
        StateHasChanged();
    }


    public void EnableClickByString(string text)
    {
        TabPage page = Pages.FirstOrDefault(x => x.Text == text);
        page.IsClickable = true;
        StateHasChanged();
    }

    public void DisableClickByString(string text)
    {
        TabPage page = Pages.FirstOrDefault(x => x.Text == text);
        page.IsClickable = false;
        StateHasChanged();
    }

    public void ActivatePageByText(string text)
    {
        TabPage page = Pages.FirstOrDefault(x => x.Text == text);
        ActivePage = page;
        StateHasChanged();
    }

    public Action Clickable(TabPage tabPage)
    {
        if (tabPage.IsClickable)
        {
            return () => ActivatePage(tabPage);
        }
        else
        {
            return () => { };
        }
    }
}
@*https://blazor-university.com/templating-components-with-renderfragements/creating-a-tabcontrol/*@