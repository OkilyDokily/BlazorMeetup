@using System.IO
@using System
@using Microsoft.AspNetCore.Hosting
@using nClam
@using Microsoft.Extensions.Configuration
@inject IWebHostEnvironment env
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<Attendee> UserManager
@inject MeetupService MeetupService
@inject IConfiguration Configuration;


@*http://www.binaryintellect.net/articles/06473cc7-a391-409e-948d-3752ba3b4a6c.aspx
    https://www.youtube.com/watch?v=GcrFdvi79lU*@

<h3 class="mx-2">@Message</h3>

<form @onsubmit="OnSubmit">
    <InputFile OnChange="OnInputFileChange" type="file" accept="image/*" />
    <br /><br />
    <button type="submit">Upload Selected File(s)</button>
</form>


@code {
    [Parameter]
    public string TeamId { get; set; }

    string Message = "No file(s) selected";
    IBrowserFile selectedFile;
    string AttendeeId { get; set; }
    string AvatarName { get; set; }

    AvatarSettings avatarSettings { get; set; }

    protected override async Task OnInitializedAsync()
    {

        if (TeamId != null)
        {

            avatarSettings = MeetupService.GetAvatarSettingsByTeamId(TeamId);
            return;
        }
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Attendee a = await UserManager.GetUserAsync(authState.User);
        AttendeeId = a.Id;
        avatarSettings = MeetupService.GetAvatarSettingsByUserId(a.Id);
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        List<string> permittedExtensions = new()
        {
            "JPG",
            "PNG",
            "GIF",
            "WEBP",
            "TIFF",
            "PSD",
            "RAW",
            "BMP",
            "HEIF",
            "INDD",
            "JPEG"
        };

        string ext = Path.GetExtension(selectedFile.Name).ToLowerInvariant();

        if (string.IsNullOrEmpty(ext) || !permittedExtensions.Select(x => "." + x.ToLowerInvariant()).Contains(ext))
        {
            Message = $"Image does not have the correct extension";
            selectedFile = null;
            return;
        }
        if (selectedFile.Size > 1000000)
        {
            Message = $"File to big";
            selectedFile = null;
            return;
        }

        Message = $"a file is selected";
        this.StateHasChanged();
    }

    private async void OnSubmit()
    {
        if (selectedFile == null) return;

        //https://martink.me/articles/blazor-file-select-with-virus-scan
        Stream stream = selectedFile.OpenReadStream();
        var clam = new ClamClient(Configuration["ClamAVServer:URL"],
        Convert.ToInt32(Configuration["ClamAVServer:Port"]));
        var scanResult = await clam.SendAndScanFileAsync(stream);
        stream.Close();
        switch (scanResult.Result)
        {
            case ClamScanResults.Clean:
                Message = $"File is clean according to antivirus software";
                Console.WriteLine(Message);
                break;
            case ClamScanResults.VirusDetected:
                Message = $"File is infected according to antivirus software";
                return;
            case ClamScanResults.Error:
                Message = $"File scan produced an error from antivirus software {scanResult.RawResult}";
                return;
            case ClamScanResults.Unknown:
                Message = $"File scan produced an unknown status from antivirus software, {scanResult.RawResult}";
                Console.WriteLine(Message);
                return;
            default:
                Message = $"Unknown error";
                return;
        }

        string path;

        if (TeamId != null)
        {
            path = $"{env.WebRootPath}\\avatars\\{TeamId + Path.GetExtension(selectedFile.Name)}";
        }
        else
        {
            path = $"{env.WebRootPath}\\avatars\\{AttendeeId + Path.GetExtension(selectedFile.Name)}";
        }
        RemovePreviousAvatarFromFileSystemTeam();
        FileStream fs = File.Create(path);
        stream = selectedFile.OpenReadStream();
        await stream.CopyToAsync(fs);
        stream.Close();
        fs.Close();

        Message = $"a file has been uploaded on server";

        AvatarName = selectedFile.Name;

        if (TeamId != null)
        {

            avatarSettings.AvatarUrl = "/avatars/" + TeamId + Path.GetExtension(selectedFile.Name);
            Console.WriteLine("avatar team");
        }
        else
        {

            avatarSettings.AvatarUrl = "/avatars/" + AttendeeId + Path.GetExtension(selectedFile.Name);
            Console.WriteLine("avatar attendee");
        }

        MeetupService.UpdateAvatarSettings(avatarSettings);
        this.StateHasChanged();
    }

    public void RemovePreviousAvatarFromFileSystemTeam()
    {
        string path = $"{env.WebRootPath}" + avatarSettings.AvatarUrl;
        if (path == $"{env.WebRootPath}" + "/avatars/" + "blank-profile.webp")
        {
            Console.WriteLine("File was default avatar");
            return;
        }
        FileInfo file = new FileInfo($"{env.WebRootPath}" + avatarSettings.AvatarUrl);
        if (file.Exists)//check file exsit or not
        {

            file.Delete();
            Console.WriteLine(" file deleted successfully");

        }
        else
        {
            Console.WriteLine(" This file does not exists ");
        }
    }

}
