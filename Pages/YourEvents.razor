@page "/YourEvents"
@attribute [Authorize]
@inject MeetupService MeetupService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<Attendee> UserManager
@inject NavigationManager NavigationManager
@using BlazorMeetup.Data
@using Microsoft.AspNetCore.Identity
@using System.Diagnostics;



<h3>Your Events</h3>
<h3>Sorted By Most Recent</h3>

<table>
    <thead>
        <tr>
            <th>Description</th>
            <th>Date And Time</th>
            <th>Maximum Attendees</th>
            <th>Minimum Attendees</th>
            <th>Current Number of Attendees</th>
        </tr>
    </thead>
    <tbody>
        @foreach (Event evt in events)
        {
            <tr @onclick='() => GoToPage(evt.Id)'>            
                <td>@evt.Description</td>
                <td>@evt.DateAndTime</td>
                <td>@evt.MaximumAttendees</td>
                <td>@evt.MinimumAttendees</td>
                <td>@evt.Attendees.Count</td>
            </tr>
        }
    </tbody>
</table>

@code
{
    List<Event> events = new();
    Attendee Your { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Your = await UserManager.GetUserAsync(authState.User);
        events = MeetupService.GetYourEvents(Your.Id);
        events.Reverse();
    }

    void GoToPage(string id)
    {
        NavigationManager.NavigateTo("/EventPage/" + Your.Id + "/" + id);
    }

    void GoToEdit(string id)
    {
        NavigationManager.NavigateTo("/CreateEvent/" + id);
    }

    void GoToDelete(string id)
    {
        MeetupService.DeleteEventById(id);
        events = MeetupService.GetYourEvents(Your.Id);
        StateHasChanged();
    }
}
