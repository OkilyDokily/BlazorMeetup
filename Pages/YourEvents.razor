@page "/YourEvents"
@attribute [Authorize]
@inject MeetupService MeetupService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<Attendee> UserManager
@inject NavigationManager NavigationManager
@using BlazorMeetup.Data
@using Microsoft.AspNetCore.Identity
@using System.Diagnostics;

<h3>Your Events</h3>
<h3>Sorted By Most Recent</h3>
<ul>
    @foreach (Event e in events)
    {
        <li @key="e.Id" @onclick="() => GoToPage(e.Id)">@e.Description <span style="color:blue;" @onclick="()=>GoToEdit(e.Id)"  @onclick:stopPropagation="true">Edit</span> <span style="color:blue;"  @onclick:stopPropagation="true"  @onclick="()=>GoToDelete(e.Id)">Delete</span></li>
    }
</ul>

@code 
{
    List<Event> events = new();
    Attendee Your { get; set;}

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Your = await UserManager.GetUserAsync(authState.User);
        events  = MeetupService.GetYourEvents(Your.Id);
        events.Reverse();
    }

    void GoToPage(string id)
    {
        NavigationManager.NavigateTo("/EventPage/" +Your.Id + "/" +id);
    }

    void GoToEdit(string id)
    {
        NavigationManager.NavigateTo("/CreateEvent/" + id);
    }

    void GoToDelete(string id)
    {
        MeetupService.DeleteEventById(id);
        events = MeetupService.GetYourEvents(Your.Id);
        StateHasChanged();
    }
}
