@attribute [Authorize]
@inject MeetupService MeetupService
@using BlazorMeetup.Data
@using System.Security.Claims

<CascadingValue Value="this" Name="CreateEventAcc">
    <h3>Create Event</h3>

    <TabControl @ref="@TabControlRef">

        <TabPage Text=@(EditMode ? "Edit >>" : "Main >>")>
            <Main EditMode=@EditMode ParentEvent="@created" TabControlAcc=@TabControlRef />
        </TabPage>

        <TabPage Text="Date Range >>">
            <DateRange ParentEvent="@created" TabControlAcc=@TabControlRef />
        </TabPage>

        <TabPage Text="Time Range">
            <TimeRange RestrictDateId="@RestrictDateId" TabControlAcc=@TabControlRef />
        </TabPage>
    </TabControl>
</CascadingValue>


@code {

    private Event created = new();
    ClaimsPrincipal User { get; set; }

    public TabControl TabControlRef;
    public string RestrictDateId { get; set; }
    [Parameter]
    public string Id { get; set; }

    public bool EditMode { get; set; }

    [Parameter]
    public bool CreateEventIsActive { get; set; }
    public void UpdateCreated()
    {
        created = MeetupService.GetEventById(created.Id);
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            TabControlRef.Pages.ForEach(x => x.IsClickable = false);

            TabControlRef.EnableClickByString("Edit >>");
            TabControlRef.EnableClickByString("Main >>");

            if (Id != null)
            {
                Event e = MeetupService.GetEventById(Id);
                Console.WriteLine(EditMode + "on after render createevent.razor");

                if (e != null)
                {
                    created = e;
                    TabControlRef.EnableClickByString("Date Range >>");

                }
            }
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        created.DateAndTime = DateTime.Today;
    }
}
