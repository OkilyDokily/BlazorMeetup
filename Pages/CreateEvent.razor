@page "/CreateEvent"
@attribute [Authorize]
@inject MeetupService MeetupService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<Attendee> UserManager
@inject IJSRuntime IJSRunTime
@using BlazorMeetup.Data
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims

<h3>Create Event</h3>

<EditForm Model="@created" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label>Description</label>
        <InputText @bind-Value="created.Description" />
    </div>

    <div>
        <label>Maximum Attendees</label>
        <InputNumber @bind-Value="created.MaximumAttendees" />
    </div>
    <div>
        <label>Minimum Attendees</label>
        <InputNumber @bind-Value="created.MinimumAttendees" />
    </div>
    <div>
        <label>Date of Event</label>
        <InputDate @bind-Value="created.DateAndTime" />
    </div>
    <button>Create Event</button>
</EditForm>


@code {
    private Event created = new();
    ClaimsPrincipal User { get; set; }
    IdentityUser DbUser { get; set; }


    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;
        DbUser = await UserManager.GetUserAsync(User);
    }
    private void HandleValidSubmit()
    {
        created.AttendeeId = DbUser.Id;
        MeetupService.CreateEvent(created);
        IJSRunTime.CreateMessage("You've successfully created a new event.");
    }
}
