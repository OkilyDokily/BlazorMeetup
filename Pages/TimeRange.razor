@inject MeetupService MeetupService

<h3>TimeRange</h3>

<EditForm Model="@ta" OnValidSubmit="@AddTimeAllowedToRestrictDate">

    <p>@rd.Date</p>

    Start
    <select @bind="@ta.BeginningHour">
        @foreach (int num in tm.GetHours())
        {
            <option value="@num">@(num == 0 ? "12AM" : (num == 12) ? "12PM" : (num - 12) < 0  ? num + "AM" : (num -12) + "PM")</option>
        }
    </select>
    <select @bind="@ta.BeginningMinute">
        @foreach (int i in tm.GetMinutes())
        {
            <option value="@i">@(i== 0 ? "00" : i)</option>
        }
    </select>
    End
    <select @bind="@ta.EndingHour">
        @foreach (int num in tm.GetHours())
        {
            <option value="@num">@(num == 0 ? "12AM" : (num == 12) ? "12PM" : (num - 12) < 0  ? num + "AM" : (num -12) + "PM")</option>
        }

    </select>
    <select @bind="@ta.EndingMinute">
        @foreach (int i in tm.GetMinutes())
        {
            <option value="@i">@(i== 0 ? "00" : i)</option>

        }
    </select>
    <button>Add Time Range</button>
</EditForm>

<button @onclick="@clickBackButton">Go Back</button>

@foreach (TimesAllowed t in rd.TimesAlloweds)
{
    string BeginningAMPM =t.BeginningHour == 0 ? "AM" : (t.BeginningHour == 12) ? "PM" : (t.BeginningHour - 12) < 0  ? t.BeginningHour + "AM" : (t.BeginningHour -12) + "PM";

    string EndingAMPM = t.EndingHour == 0 ? "AM" : (t.EndingHour == 12) ? "PM" : (t.EndingHour - 12) < 0 ? t.EndingHour + "AM" : (t.EndingHour - 12) + "PM";
<div>Beginning @((t.BeginningHour == 0 ? "12" : (t.BeginningHour == 12) ? "12" : (t.BeginningHour - 12) < 0  ? t.BeginningHour : (t.BeginningHour -12))):@(t.BeginningMinute == 0 ? "00" : t.BeginningMinute)@BeginningAMPM End @((t.EndingHour == 0 ? "12" : (t.EndingHour == 12) ? "12" : (t.EndingHour - 12) < 0  ? t.EndingHour : (t.EndingHour -12)) ):@(t.EndingMinute == 0 ? "00" : t.EndingMinute)@EndingAMPM</div>
    <p @onclick="() => delete(t.Id)">delete</p>
}

@code {

    [Parameter]
    public Event ParentEvent { get; set; }

    [Parameter]
    public string RestrictDateId { get; set; }

    [CascadingParameter]
    public CreateEvent CreateEventAcc { get; set; }
    [CascadingParameter]
    private TabControl TabControlAcc { get; set; }


    public RestrictDate rd;

    public TimesAllowed ta = new TimesAllowed();

    public TimeMaker tm = new TimeMaker();

    public void clickBackButton()
    {
        TabControlAcc.ActivatePageByText("Date Range >>");
    }

    public void delete(string id)
    {
        MeetupService.DeleteTimeAllowed(id);
        rd = MeetupService.GetRestrictDateById(RestrictDateId);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        ta.RestrictDateId = RestrictDateId;
        rd = MeetupService.GetRestrictDateById(RestrictDateId);
    }

    public void AddTimeAllowedToRestrictDate()
    {
        MeetupService.AddTimeAllowedToRestrictDate(ta);
        CreateEventAcc.UpdateCreated();
        rd = MeetupService.GetRestrictDateById(RestrictDateId);
        StateHasChanged();
    }
}
