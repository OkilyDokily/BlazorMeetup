@using System.Globalization
@inject MeetupService MeetupService
@inject UpdateAllUsers UpdateAllUsers

<EditForm Model="@ta" OnValidSubmit="@AddTimeAllowedToRestrictDate">

    <p class="">@rd.Date.ToString("M/dd/yyyy", CultureInfo.InvariantCulture)</p>
    <div>
        <p>Start</p>
        <select @bind="@ta.BeginningHour">
            @foreach (int num in TimeMaker.GetHours())
            {
                <option value="@num">@(num == 0 ? "12AM" : (num == 12) ? "12PM" : (num - 12) < 0 ? num + "AM" : (num -12) +
                "PM")</option>
            }
        </select>

        <select @bind="@ta.BeginningMinute">
            @foreach (int i in TimeMaker.GetMinutes())
            {
                <option value="@i">@(i== 0 ? "00" : i)</option>
            }
        </select>
    </div>
    <div>
        <p>End</p>
        <select @bind="@ta.EndingHour">
            @foreach (int num in TimeMaker.GetHours())
            {
                <option value="@num">@(num == 0 ? "12AM" : (num == 12) ? "12PM" : (num - 12) < 0 ? num + "AM" : (num -12) +
                "PM")</option>
            }
        </select>
        <select @bind="@ta.EndingMinute">
            @foreach (int i in TimeMaker.GetMinutes())
            {
                <option value="@i">@(i== 0 ? "00" : i)</option>

            }
        </select>
    </div>
    <button>Add Time Range</button>
</EditForm>

<button @onclick="@clickBackButton">Go Back</button>

@foreach (TimesAllowed t in rd.TimesAlloweds)
{
    string BeginningAMPM = t.BeginningHour == 0 ? "AM" : (t.BeginningHour == 12) ? "PM" : (t.BeginningHour - 12) < 0 ?
    "AM" : "PM";

    string EndingAMPM = t.EndingHour == 0 ? "AM" : (t.EndingHour == 12) ? "PM" : (t.EndingHour - 12) < 0 ?
    "AM" : "PM";

    <div>Beginning @((t.BeginningHour == 0 ? "12" : (t.BeginningHour == 12) ? "12" : (t.BeginningHour - 12) < 0 ?
    t.BeginningHour : (t.BeginningHour -12))):@(t.BeginningMinute == 0 ? "00" : t.BeginningMinute)@BeginningAMPM End
        @((t.EndingHour == 0 ? "12" : (t.EndingHour == 12) ? "12" : (t.EndingHour - 12) < 0 ? t.EndingHour : (t.EndingHour
    -12)) ):@(t.EndingMinute == 0 ? "00" : t.EndingMinute)@EndingAMPM</div>
    <p @onclick="() => delete(t.Id)">delete</p>
}

@code {

    [Parameter]
    public Event ParentEvent { get; set; }

    [Parameter]
    public string RestrictDateId { get; set; }

    [CascadingParameter(Name = "CreateEventAcc")]
    public CreateEvent CreateEventAcc { get; set; }
    [Parameter]
    public TabControl TabControlAcc { get; set; }


    public RestrictDate rd;

    public TimesAllowed ta = new TimesAllowed();

    public TimeMaker tm = new TimeMaker();

    public void clickBackButton()
    {
        TabControlAcc.ActivatePageByText("Date Range >>");
    }

    public void delete(string id)
    {
        MeetupService.DeleteTimesAllowedById(id);
        rd = MeetupService.GetRestrictDateById(RestrictDateId);
        UpdateAllUsers.InvokeUpdate(ParentEvent.Id);

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        ta.RestrictDateId = RestrictDateId;
        rd = MeetupService.GetRestrictDateById(RestrictDateId);
    }

    public void AddTimeAllowedToRestrictDate()
    {
        MeetupService.AddTimeAllowedToRestrictDate(ta);
        CreateEventAcc.UpdateCreated();
        rd = MeetupService.GetRestrictDateById(RestrictDateId);
        UpdateAllUsers.InvokeUpdate(ParentEvent.Id);

        StateHasChanged();
    }
}
