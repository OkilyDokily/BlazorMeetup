@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@using System.Collections.Generic;
@inject IHttpClientFactory clientFactory
@inject UserManager<Attendee> UserManager
@inject MeetupService MeetupService
@code {

    ClaimsPrincipal User { get; set; }
    TokenProvider tokenProvider { get; set; }
    Attendee DbUser { get; set; }
    String DbUserId { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        User = authState.User;


        if (User.Identity.IsAuthenticated)
        {

            DbUserId = (await UserManager.GetUserAsync(User)).Id;
            var result = User.Claims.Where(x => x.Type == ClaimTypes.Email).ToList().FirstOrDefault();

            if (!StaticTokenHolder.tokens.ContainsKey(result.Value)) return;
            if (!StaticTokenHolder.loggedInStatus[result.Value]) return;

            StaticTokenHolder.loggedInStatus[result.Value] = false;
            TokenProvider tokenProvider = StaticTokenHolder.tokens[result.Value];
            if (tokenProvider.AccessToken != "" && tokenProvider.AccessToken != null)
            {

                DiscordRequestService drs = new DiscordRequestService(clientFactory, tokenProvider);
                Console.WriteLine("get servers async");
                await drs.GetServersAsync(DbUserId, MeetupService);
            }
        }

    }
}

<CascadingValue Value=@DbUserId Name="DbUserId">
    <CascadingAuthenticationState>
        <Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            </Found>
            <NotFound>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p>Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingAuthenticationState>
</CascadingValue>